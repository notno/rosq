// A simpler way to define functions
def {fun} (\ {args body} {def (head args) (\ (tail args) body)})

// Curry
fun {curry f xs} {eval (join (list f) xs)}

// Uncurry
fun {uncurry f & xs} {f xs}

// Second in a list
fun {second list} {head (tail list)}

// Uncurried head function
def {head-uncurried} (\ {& i} {head i})
// OR
def {head-uncurried} (eval (uncurry head))

// Length of a list, using recursion
fun {len l} { if (== l {}) {0} {+ 1 (len (tail l))}}

// Reverse a list, using recursion
fun {reverse l} {if (== l {}) {{}} {join (reverse (tail l)) (head l)}}

// Returns nth item of a list (recursive)
fun {nth n qx} {if (== n 0) {head qx} {nth (- n 1) (tail qx)}}

// returns 1 if an element is a member of a list, otherwise 0. (recursive)
fun {has qx sym} {
    if (!= qx {}) {
        if (== (head qx) sym) {
            1
        } {
            has (tail qx) sym
        }
    } {
        0
    }
}

// returns the last element of a list.
fun {last qx} {
    if (== (tail qx) {}) {
        head qx
    } {
        last (tail qx)
    }
}

// Lisp logical operator functions such as or, and and not.
fun {or test1 test2} {
    if (|| test1 test2) {
        1
    } {
        0
    }
}
